.TH HARBOR-WAVE 1
.SH NAME
.B harbor-wave \-
Spawn iterative machines on Digital Ocean based on custom templates

.SH SYNOPSIS
.SY harbor-wave
.OP --options
.OP command
.OP argument
.YS

.SH DESCRIPTION
Harbor Wave is a Utility for the Digital Ocean(https://digitalocean.com), cloud
service, to deploy temporary applications using droplets based on custom
templates. While using multiple machines, it is possible to deploy an
application as a swarm of droplets, each with a unique sequence number. You can
do this simply by specifying the amount of droplets with the spawn command.

Communication and interaction between droplets is up to the application in
the template, but can be facilitated via the private networking between droplets
that exists by default

Harbor-Wave uses the Digital Ocean API to spawn temporary utility machines based
on custom templates in Digital Ocean's Cloud. You can rapidly create and destroy
custom machines. This is designed to go hand-in-hand with Disk-Image-Scripts.
https://github.com/GIJack/disk-image-scripts

harbor-wave creates a series of machines with the host name that is generated
using a basename, and then a number which is the sequence number of the machine.

The amount of machines spawned can be controlled by adding N, a number to the
end of the spawn command.

in addition, the sequence number is added to the machines meta-data that can
be retrieved via the API from within the machine in JSON format, that has
"sequence":N and "base-name":string, "payload":string, and
"payload-filename":string keys.

{
    "sequence":N
    "base-name":"name"
    "payload":<...>
    "payload-filename":<from FILE:>
}

where N is the sequence number of the machine

DO documentation on droplet metadata: https://docs.digitalocean.com/products/droplets/how-to/retrieve-droplet-metadata/

.SH COMMANDS

.BR help \t \fr\fI<topic>\fR
\tShort Help blurb. If topic is specified then only that topic is displayed.
help by itself will print the full help.

topics: config, commands

.BR list \t \fR\fI[what]\fR
\tList information from Digital Ocean. Takes a subcommand. See subsection \fB LIST SUBCOMMANDS\fR below

.BR spawn \t \fR\fI<N>\fR

Create N new virtual machines. machines are named using base-name and a
numerical suffix, iterated, count from 0.

.BR destroy \t \fR\fI<"ALL">\fR

Destroy virtual machines created with spawn. This is based on name from settings
and will destroy all machines with the harborwave tag and prefix. if ALL is
specified as an additional argument: All machines with the harborwave prefix are
destroyed

.BR set \t \fR\fI[item]\fR \t \fI[value]\fR

Set a config item. see subsection \fBCONFIG ITEMS\fR for list of config items.
Setting a value to "" will reset an item to its default setting

.BR get \t \fR\fI[item]\fR

print the value of a config item. see subsection \fBCONFIG ITEMS\fR for list of config items

.BR print-config

Print all config items in a table. The --terse option prints information in CSV format

.BR touch

Stop after processing config. Useful for generating a new config with defaults

.BR check-config
Check if config items are valid, and spawn/destroy will work with current
config. Supports --options

.SS LIST SUBCOMMANDS

.BR machines
\t List VMs associated with harborwave. Based on tag setting.  Default: harborwave

.BR projects
\t List Projects associated with the current account

.BR templates
\t Show available custom images

.BR regions
\t List valid region codes, along with descriptions

.BR ssh-keys
\t List SSH keys in your account, with index value

.BR sizes
\t List size codes with descriptions and cost

.BR Domains
\t List DNS domains associated with the account

.BR money-left
\t List how much funds you have remaining on your account. Also lists a 'burn rate'
of how many dollars per hour harbor-wave machines are costing you. NOTE: this
does not include other droplets/machines. just the ones associate with harbor-wave
via tag

.SS CONFIG ITEMS

.BR api-key
\t Digital Ocean Account API Key. Get this from the web interface

.BR domain
\t DNS domain to use if use-dns is set True. This
domain needs to be already setup in Digital Ocean Networking for this to work.

.BR project
\t Digital Ocean uses "projects" as subfolders for objects. if this is not ""
new machines will spawn in the configured project for easy manager. Project must
exist. default is unset

.BR payload
\t Input data from your local machine and made availble over the
Digital Ocean API, for use with cloud-init or other. This is a string unless it
starts with FILE:. In this case, file contents are uploaded

.BR region
\t Digital Ocean region code. Droplets will spawn in this DO region, but list
will show all regions, and destroy terminate accross all regions.
Default: nyc1

.BR ssh-key-n
\t Interger. Index of SSH-key on your digital ocean account that will be used with
new machines spawned. see list-ssh keys for available options

.BR tag
\t Droplet tag used to identify harborwave machines
. spawn will make droplets with this tag, and list and destroy will only match
droplets with this tag.  Default: harborwave

.BR base-name
\t Basename for VMs created with spawn and
destroyed with destroy. Indivual machines are named base-name + N. destroy
matches against machines that have the correct tag and start with base-name.

.BR size
\t Size code for new droplets. see list sizes.

.BR template
\t ID of template for creating new machines with spawn. see list templates for
valid entries

.BR use-dns
\t True or False. use FQDNs and create DNS entries for machines spawned. domain
item needs to be set

.BR wait
\t True or False. Wait for IP addresses before exiting and print them. This
is implied by use-dns, which needs IP addresses

.SH OPTIONS
NOTE: options on the command line will override the config generated by set.
configuration override options are lower case. everything else is upper case

.BR "-?, --help"
\t Help Message

.BR "-T, --terse"
list and print-config commands uses CSV format for output. Does nothing for all other commands.

.SS CONFIG OVERRIDE OPTIONS
.BR "-a, --api-key" \fR \t API_KEY
\t Digitial Ocean API key to use

.BR "-d, --domain" \fR \t DOMAIN
\t Doman to use if use-dns is true

.BR "-g, --tag" \fR \t TAG
\t Digital Ocean tag to use on VMs so harbor-wave can identify its VMs.

.BR "-p, --project" \fR \t PROJECT
\t Digital Ocean Project for new machines

.BR "-k, --ssh-key-n" \fR \t SSH_KEY_N
\t Interger: index of the SSH-key to use on the created hosts. Default: 0

.BR "-n, --base-name" \fR \t VM_BASE_NAME
\t Base-name for spawn'ing new VMs.

.BR "-r, --region" \fR \t REGION
\t Digital Ocean four character region code. Where new machines are spawned.

.BR "-s, --size" \fR \t VM_SIZE
\t Digital Ocean size code for new machines

.BR "-t, --template" \fR \t TEMPLATE_ID
\t ID of custom template that gets used to make new machines.

.BR "-u, --use-dns"
Use FQDNS for naming VMs, and then add them to DNS. must have a domain set or
specified with -d.

.SH FILES

\fI ~/.config/harbor-wave/harbor-wave.cfg \fR
\t Main config file. Stores keys from set in JSON.

\fI ~/.config/harbor-wave/api_key \fR
API-Key file. Plain text, contains the 64 character hexdecimal Digital Ocean
management Key. this is automaticly generated with set api-key. By default it
has restrictive permissions to prevent others from reading.

.SH SEE ALSO
.I gen_cloud_template(1)
